/*
 * File    : Rcc.h
 * Remark  : Macro to access Reset and Clock Control controller on chip.
 *           Fow now this is STM32F10XXX chipset.
 *
 */

#ifndef RCC_H
#define RCC_H

#include "..\Type.h"
#include "..\Bit.h"

#ifdef __cplusplus
extern "C" {
#endif

#define RCC_HSI_CLOCK		8000000UL
#define RCC_HSE_CLOCK		8000000UL

#define RCC_BASE			0x40021000

#define RCC_CR				0x40021000
#define RCC_CFGR			0x40021004
#define RCC_CIR				0x40021008
#define RCC_APB2RSTR		0x4002100C
#define RCC_APB1RSTR		0x40021010
#define RCC_AHBENR			0x40021014
#define RCC_APB2ENR			0x40021018
#define RCC_APB1ENR			0x4002101C
#define RCC_BDCR			0x40021020
#define RCC_CSR				0x40021024

//#define RCC_REG_ADDR(RegOffset)		(RCC_BASE + RegOffset)
//#define RCC_MMAP(RegOffset)			IO_MMAP((RCC_BASE + RegOffset))

#define RCC_ENA_HSI(Ena)			ENABLE_IO_BIT(RCC_CR, BIT_0, Ena)
#define RCC_GET_HSI()				GET_IO_BIT(RCC_CR, BIT_0)
#define RCC_IS_HSI_READY()			GET_IO_BIT(RCC_CR, 1)

#define RCC_SET_HSI_TRIMM(TrimVal)	SET_IO_BITS(RCC_CR, BIT_3, BITMASK_5, TrimVal)
#define RCC_GET_HSI_TRIM()			GET_IO_BITS(RCC_CR, BIT_3, BITMASK_5)

#define RCC_GET_HSI_CALIB()			GET_IO_BITS(RCC_CR, BIT_8, BITMASK_8)

#define RCC_ENA_HSE(Ena)			ENABLE_IO_BIT(RCC_CR, BIT_16, Ena)
#define RCC_GET_HSE()				GET_IO_BIT(RCC_CR, BIT_16)
#define RCC_IS_HSE_READY()			GET_IO_BIT(RCC_CR, BIT_17)

#define RCC_ENA_HSE_BYPASS(Ena)		ENABLE_IO_BIT(RCC_CR, BIT_18, Ena)
#define RCC_IS_HSE_BYPASS()			GET_IO_BIT(RCC_CR, BIT_18)

#define RCC_ENA_CLOCK_SEC_SYS(Ena)	ENABLE_IO_BIT(RCC_CR, BIT_19, Ena)

#define RCC_ENA_PLL(Ena)			ENABLE_IO_BIT(RCC_CR, BIT_24, Ena)
#define RCC_IS_PLL_ENABLED()		GET_IO_BIT(RCC_CR, BIT_24)
#define RCC_IS_PLL_READY()			GET_IO_BIT(RCC_CR, BIT_25)

//#define RCC_1_WAIT_STATE()			__asm volatile ("NOP;")
//#define RCC_2_WAIT_STATE()			__asm volatile ("NOP;NOP;")
//#define RCC_DMB()					__asm volatile ("DMB;");

#define RCC_APB_PRESCALE__HCLK_NO_DIV		0x0		// 0xx: HCLK not divided
#define RCC_APB_PRESCALE__HCLK_DIV_BY_2		0x4		// 100: HCLK divided by 2
#define RCC_APB_PRESCALE__HCLK_DIV_BY_4		0x5		// 101: HCLK divided by 4
#define RCC_APB_PRESCALE__HCLK_DIV_BY_8		0x6		// 110: HCLK divided by 8
#define RCC_APB_PRESCALE__HCLK_DIV_BY_16	0x7		// 111: HCLK divided by 16

#define RCC_GET_APB1_PRESCALE()					GET_IO_BITS(RCC_CFGR, BIT_8, BITMASK_3)
#define RCC_SET_APB1_PRESCALE(RccApbPresc)		SET_IO_BITS(RCC_CFGR, BIT_8, BITMASK_3, RccApbPresc)

#define RCC_GET_APB2_PRESCALE()					GET_IO_BITS(RCC_CFGR, BIT_11, BITMASK_3)
#define RCC_SET_APB2_PRESCALE(RccApbPresc)		SET_IO_BITS(RCC_CFGR, BIT_11, BITMASK_3, RccApbPresc)

#define RCC_MCO__NO_CLOCK			0x0
#define RCC_MCO__SYSCLK				0x4
#define RCC_MCO__HSI				0x5
#define RCC_MCO__HSE				0x6
#define RCC_MCO__PLL_DIV_2			0x7

#define RCC_SET_MCO_CLK(McoClk)				SET_IO_BITS(RCC_CFGR, BIT_24, BITMASK_3, McoClk)

#define RCC_USB_PRESCALE__DIV_1_DOT_5		0x0
#define RCC_USB_PRESCALE__DIV_1				0x1

#define RCC_SET_USB_PRESC(UsbPrescale)		ENABLE_IO_BIT(RCC_CFGR, BIT_22, UsbPrescale)

#define RCC_PLL_MUL_BY_2			0x0
#define RCC_PLL_MUL_BY_3			0x1
#define RCC_PLL_MUL_BY_4			0x2
#define RCC_PLL_MUL_BY_5			0x3
#define RCC_PLL_MUL_BY_6			0x4
#define RCC_PLL_MUL_BY_7			0x5
#define RCC_PLL_MUL_BY_8			0x6
#define RCC_PLL_MUL_BY_9			0x7
#define RCC_PLL_MUL_BY_10			0x8
#define RCC_PLL_MUL_BY_11			0x9
#define RCC_PLL_MUL_BY_12			0xA
#define RCC_PLL_MUL_BY_13			0xB
#define RCC_PLL_MUL_BY_14			0xC
#define RCC_PLL_MUL_BY_15			0xD
//#define RCC_PLL_MUL_BY_16			0xE
#define RCC_PLL_MUL_BY_16			0xF

#define RCC_SET_PLL_MUL(MulBy)		SET_IO_BITS(RCC_CFGR, BIT_18, BITMASK_4, MulBy)
#define RCC_GET_PLL_MUL()			GET_IO_BITS(RCC_CFGR, BIT_18, BITMASK_4)

#define RCC_SET_PLLXTPRE(Set)		ENABLE_IO_BIT(RCC_CFGR, BIT_17, Set)
#define RCC_GET_PLLXTPRE()			GET_IO_BIT(RCC_CFGR, BIT_17)

#define RCC_PLL_SRC__HSI_DIV_2		0x0
#define RCC_PLL_SRC__HSE			0x1

#define RCC_SET_PLL_SRC(PllSrc)		ENABLE_IO_BIT(RCC_CFGR, BIT_16, PllSrc)
#define RCC_GET_PLL_SRC()			GET_IO_BIT(RCC_CFGR, BIT_16)

#define RCC_ADC_PRESCALE__PCLK2_DIV_2		0x0
#define RCC_ADC_PRESCALE__PCLK2_DIV_4		0x1
#define RCC_ADC_PRESCALE__PCLK2_DIV_6		0x2
#define RCC_ADC_PRESCALE__PCLK2_DIV_8		0x3

#define RCC_SET_ADC_PRESCALE(AdcPrescale)	SET_IO_BITS(RCC_CFGR, BIT_14, BITMASK_2, AdcPrescale)

#define RCC_AHB_PRESCALE__SYSCLK			0x0		//	0xxx: SYSCLK not divided
#define RCC_AHB_PRESCALE__SYSCLK_DIV_2		0x8		//	1000: SYSCLK divided by 2
#define RCC_AHB_PRESCALE__SYSCLK_DIV_4		0x9		//	1001: SYSCLK divided by 4
#define RCC_AHB_PRESCALE__SYSCLK_DIV_8		0xA		//	1010: SYSCLK divided by 8
#define RCC_AHB_PRESCALE__SYSCLK_DIV_16		0xB		//	1011: SYSCLK divided by 16
#define RCC_AHB_PRESCALE__SYSCLK_DIV_64		0xC		//	1100: SYSCLK divided by 64
#define RCC_AHB_PRESCALE__SYSCLK_DIV_128	0xD		//	1101: SYSCLK divided by 128
#define RCC_AHB_PRESCALE__SYSCLK_DIV_256	0xE		//	1110: SYSCLK divided by 256
#define RCC_AHB_PRESCALE__SYSCLK_DIV_512	0xF		//	1111: SYSCLK divided by 512

#define RCC_SET_AHB_PRESCALE(AhbPrescale)	SET_IO_BITS(RCC_CFGR, BIT_4, BITMASK_4, AhbPrescale)
#define RCC_GET_AHB_PRESCALE()				GET_IO_BITS(RCC_CFGR, BIT_4, BITMASK_4)

#define RCC_SYSCLK__HSI					0x0		//	00: HSI oscillator used as system clock
#define RCC_SYSCLK__HSE					0x1		//	01: HSE oscillator used as system clock
#define RCC_SYSCLK__PLL					0x2		//	10: PLL used as system clock

#define	RCC_GET_SYSCLK_SRC()				GET_IO_BITS(RCC_CFGR, BIT_2, BITMASK_2)

#define RCC_SWITCH_SYSCLK(SysClk)			SET_IO_BITS(RCC_CFGR, BIT_0, BITMASK_2, SysClk)

#define RCC_APB2_CTRL__TIM11		BITHEX_21
#define RCC_APB2_CTRL__TIM10		BITHEX_20
#define RCC_APB2_CTRL__TIM9			BITHEX_19
#define RCC_APB2_CTRL__ADC3			BITHEX_15
#define RCC_APB2_CTRL__USART1		BITHEX_14
#define RCC_APB2_CTRL__TIM8			BITHEX_13
#define RCC_APB2_CTRL__SPI1			BITHEX_12
#define RCC_APB2_CTRL__TIM1			BITHEX_11
#define RCC_APB2_CTRL__ADC2			BITHEX_10
#define RCC_APB2_CTRL__ADC1			BITHEX_9
#define RCC_APB2_CTRL__IOPG			BITHEX_8
#define RCC_APB2_CTRL__IOPF			BITHEX_7
#define RCC_APB2_CTRL__IOPE			BITHEX_6
#define RCC_APB2_CTRL__IOPD			BITHEX_5
#define RCC_APB2_CTRL__IOPC			BITHEX_4
#define RCC_APB2_CTRL__IOPB			BITHEX_3
#define RCC_APB2_CTRL__IOPA			BITHEX_2
#define RCC_APB2_CTRL__AFIO			BITHEX_0

#define RCC_RESET_APB2_CTRL(Apb2Ctrl)		IO_MEM32(RCC_APB2RSTR) |= Apb2Ctrl

#define RCC_APB1_CTRL__DAC			BITHEX_29
#define RCC_APB1_CTRL__PWR			BITHEX_28
#define RCC_APB1_CTRL__BKP			BITHEX_27
#define RCC_APB1_CTRL__CAN			BITHEX_25
#define RCC_APB1_CTRL__USB			BITHEX_23
#define RCC_APB1_CTRL__I2C2			BITHEX_22
#define RCC_APB1_CTRL__I2C1			BITHEX_21
#define RCC_APB1_CTRL__UART5		BITHEX_20
#define RCC_APB1_CTRL__UART4		BITHEX_19
#define RCC_APB1_CTRL__USART3		BITHEX_18
#define RCC_APB1_CTRL__USART2		BITHEX_17
#define RCC_APB1_CTRL__SPI3			BITHEX_15
#define RCC_APB1_CTRL__SPI2			BITHEX_14
#define RCC_APB1_CTRL__WWDG			BITHEX_11
#define RCC_APB1_CTRL__TIM14		BITHEX_8
#define RCC_APB1_CTRL__TIM13		BITHEX_7
#define RCC_APB1_CTRL__TIM12		BITHEX_6
#define RCC_APB1_CTRL__TIM7			BITHEX_5
#define RCC_APB1_CTRL__TIM6			BITHEX_4
#define RCC_APB1_CTRL__TIM5			BITHEX_3
#define RCC_APB1_CTRL__TIM4			BITHEX_2
#define RCC_APB1_CTRL__TIM3			BITHEX_1
#define RCC_APB1_CTRL__TIM2			BITHEX_0

#define RCC_RESET_APB1_CTRL(Apb1Ctrl)		IO_MEM32(RCC_APB1RSTR) |= Apb1Ctrl

#define RCC_AHB_CTRL__SDIOEN		BITHEX_10
#define RCC_AHB_CTRL__FSMCEN		BITHEX_8
#define RCC_AHB_CTRL__CRCEN			BITHEX_6
#define RCC_AHB_CTRL__FLITFEN		BITHEX_4
#define RCC_AHB_CTRL__SRAMEN		BITHEX_2
#define RCC_AHB_CTRL__DMA2EN		BITHEX_1
#define RCC_AHB_CTRL__DMA1EN		BITHEX_0

#define RCC_ENA_AHB_CTRL_CLK(Ena, AhbCtrl)				\
	(Ena) ? (IO_MEM32(RCC_AHBENR) |= AhbCtrl) : (IO_MEM32(RCC_AHBENR) &= ~(AhbCtrl))

#define RCC_ENA_APB2_CTRL_CLK(Ena, Apb2Ctrl)			\
	(Ena) ? (IO_MEM32(RCC_APB2ENR) |= Apb2Ctrl) : (IO_MEM32(RCC_APB2ENR) &= ~(Apb2Ctrl))

#define RCC_GET_APB2_CTRL_CLK()			IO_MEM32(RCC_APB2ENR)

#define RCC_ENA_APB1_CTRL_CLK(Ena, Apb1Ctrl)			\
	(Ena) ? (IO_MEM32(RCC_APB1ENR) |= Apb1Ctrl) : (IO_MEM32(RCC_APB1ENR) &= ~(Apb1Ctrl))

#define RCC_GET_APB1_CTRL_CLK()			IO_MEM32(RCC_APB1ENR)

#define RCC_RESET_BACK_DOM()			SET_IO_BIT(RCC_BDCR), BIT_16)

#define RCC_CLR_RST_BACK_DOM()			CLR_IO_BIT(RCC_BDCR, BIT_16)

#define RCC_ENA_RTC_CTRL(Ena)			ENABLE_IO_BIT(RCC_BDCR, BIT_15, Ena)

#define RCC_RTC_CLK_SRC__NONE			0x0
#define RCC_RTC_CLK_SRC__LSE			0x1
#define RCC_RTC_CLK_SRC__LSI			0x2
#define RCC_RTC_CLK_SRC__LSE_DIV_128	0x3

#define RCC_SET_RTC_CLK_SRC(RtcClkSrc)	SET_IO_BITS(RCC_BDCR, BIT_8, BITMASK_2, RtcClkSrc)

#define RCC_ENA_LSE_BYPASS(Ena)			ENABLE_IO_BIT(RCC_BDCR, BIT_2, Ena)

#define RCC_IS_LSE_READY()				GET_IO_BIT(RCC_BDCR, BIT_1)

#define RCC_ENA_LSE(Ena)				ENABLE_IO_BIT(RCC_BDCR, BIT_0, Ena)

#define RCC_GET_LOW_PWR_RST_FLAG()		GET_IO_BIT(RCC_CSR, BIT_31)
#define RCC_GET_WND_WATCHDOG_FLAG()		GET_IO_BIT(RCC_CSR, BIT_30)
#define RCC_GET_INDP_WATCHDOG_FLAG()	GET_IO_BIT(RCC_CSR, BIT_29)
#define RCC_GET_SOFT_RST_FLAG()			GET_IO_BIT(RCC_CSR, BIT_28)
#define RCC_GET_POR_RST_FLAG()			GET_IO_BIT(RCC_CSR, BIT_27)

#define RCC_REMOVE_RESET_FLAG()			SET_IO_BIT(RCC_CSR, BIT_24)

#define RCC_IS_LSI_READY()				GET_IO_BIT(RCC_CSR, BIT_1)
#define RCC_ENA_LSI(Ena)				ENABLE_IO_BIT(RCC_CSR, BIT_0, Ena)

#ifdef __cplusplus
}
#endif

#endif  // End of RCC_H
